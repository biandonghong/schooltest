卞东红 2023-2-6 10:53 第一次修改
卞东红 2023-2-6 14:01 第二次修改
卞东红 2023-2-7 8:44
  
  
  rom xiugai--------
1 cmake
2 MicroDicom
3 Miniconda3-py39  D:\Miniconda3\
3 vs2019
4 Qt C:\Qt\5.15.2\msvc2019_64\bin


//重点更改 labmri
//

Qt Quick包括描述性语言QML、语言运行时、 大量的用户界面元素、Qt Creator对QML的完美支持、Qt Quick设计器、QML与C++混合 编程支持等众多技术，
使用它你可以轻松、快速地为移动和嵌入式设备创建流畅的用户界面. 在Android等移动设备上，Qt Quick应用默认使用0penGLES,渲染效率很高，
你可以 用它创建非常炫、非常酷、非常迷人的界面.QML可以扩展现有的应用程序，也可以称之为“二次开发”。
说实话在毕业刚入职时接触了类似的项目，当时也是一脸懵逼，怎么会有这种形式的开发，在别人做好的软件上直接修改。其实类似的二次开发有CAD, Catia等，不过它们是dll, com组件这种插件的模式。

QtQuick能够与C++，JS有机结合混合编程，开发者可以使用已有的Qt技术结合Qt Quick, 创建更好的应用程序。

相对于QWidget, MFC等，qml创建应用程序可能会更简单一些。

执行函数;

QML文档分为import declaration

Text类型支持 HTML格式

orthanc 下载 安装
https://blog.csdn.net/qq_17456539/article/details/126369040

http://t.zoukankan.com/h2zZhou-p-6291663.html

OrthancPluginLookupPatient(),
OrthancPluginLookupStudy(), 
OrthancPluginLookupStudyWithAccessionNumber(), 
OrthancPluginLookupSeries()
and OrthancPluginLookupInstance()

https://www.orthanc-server.com/

//安装
https://www.likecs.com/show-941220.html

CMAKE_TOOLCHAIN_FILE
D:\vcpkg
https://copyfuture.com/blogs-details/202207120544420185


D:\vcpkg\scripts\buildsystems\vcpkg.cmake

D:\vcpkg\scripts\buildsystems\vcpkg.cmake

https://copyfuture.com/blogs-details/202207120544420185


We'll use official Qt instead of vcpkg's: C:/Qt/5.15.2/msvc2019_64

CMake Error: File D:/Lab-Root/LabMRI/Sqlpanel/sqlpanel-ng/version.h.in does not exist.

CMake Error at CMakeLists.txt:75 (configure_file):
  configure_file Problem configuring file


D:/Lab-Root/LabMRI/Sqlpanel/sqlpanel-ng/version.h.in  需要在这里
D:/Lab-Root/LabMRI/Modules/settingspanel-ng            实际在这里

//软件测试
http://www.51testing.com/html/43/n-7793743.html

测试工程师的工作职责
当一个新的项目上线后，一旦项目出了问题，多数情况都会先找测试的麻烦，因为测试作为项目上线前的“最后”一道工序，
类似于守门员的身份，也就是我们常说的“背锅侠”。项目上线后出了问题，上面领导的想法自然是测试为什么没测出来问题，测试都干什么去了？

作为测试人员，大家心里都明白：软件测试没有穷尽测试的说法。
像平台问题、业务层面的问题、系统方面的问题等等都有可能导致出现缺陷。作为一个良性健康的项目团队，重点应该考虑的是分工明确、各展所长。
非是出了问题相互推卸责任。这也是开发和测试部门之间的一个沟通协调问题了。


测试时间的压缩
　　一般我们的项目计划确定后，基本各个环节的时间都计算好了的。就项目开发来说，像前期的项目需求分析和评估、项目规划、项目UI界面设计、程序开发等都有确定时间周期的，一些特别重要的环节也会出现周期适当延申的情况。
但测试就不一样了，作为项目成型后且即将上线的最后一个环节，不管项目还剩下多长时间，都会直接交给测试，并要求最后期限内必须完成，而并不会考虑因留给测试人员的时间太短，可能导致的一系列问题。


项目测试作为产品研发的比较靠后的一个环节，项目开发剩余的时间已经不多，并且会要求最后期限内必须完成，而并不会考虑因留给测试人员的时间太短，可能会导致测试不充分。
//尽快展开 稳定性及性能测试(最后写)
根据《The Newstack》报道：软件测试平均消耗企业应用预算的30-40%。如果你参与了软件开发过程，那么你就会明白软件测试的重要性。如果bug在早期被发现，修复的成本无论是从金钱还是时间来考量，都会更低。
　　随着软件开发项目的不断扩展，它们往往会变得更加复杂，随着项目开发周期变得越来越短，依靠手工测试来跟上进度可能会很有挑战性，所以越来越多的公司选择了自动化测试。因为这能够让他们在合理的时间范围内达到测试目的。

自动化测试的类型
　回归测试
在每次构建之后，通常会重复回归测试。

　单元测试
这些评估软件平台的单个单元。一个单元是任何软件中最小的可测试部分，通常只有一个或很少的输入，它通常还会导出一个输出。

集成测试
　　在集成测试中，所有的单元被合并，所有的单元被一起测试。进行这些测试是为了确保当不同的单元相互作用并且应用程序按预期工作时没有bug。

//　性能测试（简单书写）
　　这些评估应用程序在压力下的性能。这些测试的结果是添加限制或警告以防止意外问题的基础。
测试系统的性能是否满足生产性能要求
http://www.51testing.com/html/57/n-7793657.html 单独说明性能测试的概念

从临床应用软件用户的角度来说，要重点关注界面的操作、事件的响应时间，用户操作页面是否有超时等待、体验不好、流畅度不够的地方，节目是否有闪烁现象；
从临床应用软件开发的角度来讲，就是改善架构及代码的设计，修改软件运行时出现的故障和崩溃；
并且也要关注扫描控制计算机的CPU使用率、内存使用率磁盘使用率。 
那性能测试要关注临床应用软件的界面、软件的架构及代码和扫描主控计算机的配置来保障  磁共振成像系统的性能，提供良好的用户体验，尽可能找出系统性能薄弱的环节，帮助进行性能优化。

1、CPU使用率 70
CPU使用率代表程序占用的CPU资源，CPU使用率 = 1 - CPU空闲时间/总CPU时间，在性能测试中，CPU使用率是个非常重要的指标，细分为如下指标：
　　· 用户态（user）：用户程序运行时间占比。当该值很高时，说明用户程序处理时间过长，需要优化代码
　　· 系统态（sys）：系统程序运行时间占比。当该值很高时，说明内核使用时间过长，需要排查系统是否存在频繁调度、线程进程是否频繁切换等
　　· IO等待态（io wait）：系统等待IO的时间占比。当该值很高时，说明程序等待IO（网络、磁盘）的时间过长，需要从程序异步，或网络方面排查
　　· 空闲态（idle）：空闲状态的时间占比
　　整体CPU使用率可以使用 1 - idle（率）来计算。在平时的压力测试中，如果用户态 + 系统态 > 50% 就应该引起关注。

2、内存使用率 70
http://www.51testing.com/html/20/n-7793520.html
一般来说当系统平均负载高于 70% 时，就需要关注CPU使用情况了，当平均负载过高时，系统进程响应变慢，影响正常服务
一般来说，系统内存使用率 大于 70%，就需要关注系统内存使用情况了，当内存使用过高，容易出现内存不足内存泄漏等问题。

3 磁盘使用率

同时启动监控程序（可以用nmon或者系统命令top/vmstat/iostat 等）

性能测试的类型 主要的两种性能测试方法：负载测试和压力测试
　LoadRunner

对于一个多用户的应用程序，性能是非常重要的。性能不仅是执行的速度，它包括负载和并发方面。VisualStudio是可以用于性能测试的工具之一。VisualStudioTest版或VisualStudio2010旗舰版为自动化测试提供了支持。


测试用例编写
软件 稳定性 定义
稳定性测试（也可称可靠性测试）通过给系统加载一定的业务压力，让系统持续运行一段时间（7X24小时），检测系统是否稳定运行
//性能测试的定义
https://blog.csdn.net/m0_71746299/article/details/125984544
指的是软件系统或构件对于其及时性要求符合程度的指标



本临床应用软件的系统测试，目的在于系统装机后出厂前，制定测试方案，对系统进行分类详细测试，列出测试项目、制定测试方法、分析测试结果。实际测试结果和预期结果进行对比，检查系统各个功能和性能是否符合需求

fq_150 lab7355608

测试计划


临床应用软件用户的角度来说，测试人员要重点关注并记录界面的操作、事件的响应时间和响应速度，用户操作页面是否有超时等待、体验不好、流畅度不够的地方，界面是否有闪烁等情况。软件的容错性，数据校验能力，差错防御能力，用户使用限制，响应超时提示，数据保存和恢复能力，致命错误恢复能力。通过这些情况，来评估临床应用软件的性能。

版本控制

qt5 在另外的分支上 开发


https://blog.csdn.net/weixin_39684052/article/details/112244967


启动扫描主控计算机，及扫描控制软件

//
安装 临床应用软件






































